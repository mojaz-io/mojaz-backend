---
http_interactions:
- request:
    method: get
    uri: https://shapeof.com/
    body:
      encoding: UTF-8
      string: ''
    headers:
      Connection:
      - close
      Host:
      - shapeof.com
      User-Agent:
      - http.rb/4.1.1
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 09 Sep 2019 15:10:05 GMT
      Server:
      - Apache/2.4.29 (Ubuntu)
      Last-Modified:
      - Thu, 05 Sep 2019 16:38:56 GMT
      Etag:
      - '"6015-591d0f52ac800"'
      Accept-Ranges:
      - bytes
      Content-Length:
      - '24597'
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Content-Type:
      - text/html
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 09 Sep 2019 15:09:56 GMT
recorded_with: VCR 5.0.0
